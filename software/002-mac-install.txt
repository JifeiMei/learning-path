## System Preference

### 切换输入法快捷键设置
在 Preference -> shortcut -> keyboard and input 设置为 ctrl＋down arrow 比较好，这样不影响 ctrl + space 打开insight，或者 option＋ctrl＋space打开finder。


### .bash_profile
alias ll=“ls -Glah”

### Turn off Dictation
正确的关闭方法：关闭enhanced ， shortcut选择位为off，dictation选off，microphone选择internal。这样重启就不会出现speechRecognition的进程了。该进程占用内存900MB。


## 软件安装

### 安装Brew
```
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew doctor

brew update                        #更新brew可安装包，建议每次执行一下
brew search php55                  #搜索php5.5
brew tap josegonzalez/php          #安装扩展<gihhub_user/repo>   
brew tap                           #查看安装的扩展列表
brew install php55                 #安装php5.5
brew remove  php55                 #卸载php5.5
brew upgrade php55                 #升级php5.5
brew options php55                 #查看php5.5安装选项
brew info    php55                 #查看php5.5相关信息
brew home    php55                 #访问php5.5官方网站
brew services list                 #查看系统通过 brew 安装的服务
brew services cleanup              #清除已卸载无用的启动配置文件
brew services restart php55        #重启php-fpm
```

### Yosemite自带了zsh
zsh --version

### Cask
```
brew tap phinze/homebrew-cask && brew install brew-cask 

brew cask search        #列出所有可以被安装的软件
brew cask search php    #查找所有和php相关的应用
brew cask list          #列出所有通过cask安装的软件
brew cask info phpstorm #查看 phpstorm 的信息
brew cask uninstall qq  #卸载 QQ
```

### iTerm2
```
brew cask install iterm2

开发包，暂时不安装
brew install wget watch tmux cmake openssl imagemagick graphicsmagick gearman geoip readline autoconf multitail source-highlight autojump zsh-completions sshfs 

常用软件，安装了sublime，phpstorm可以安装，调查下mplayerx，qq， thunder，atom，appcleaner；
brew cask install alfred appcleaner firefox google-chrome phpstorm sublime-text sequel-pro sketch mplayerx thunder qq
```

### Mysql
```
brew install mysql

// finally print the folowing message

==> Pouring mysql-5.6.26.yosemite.bottle.tar.gz
==> /usr/local/Cellar/mysql/5.6.26/bin/mysql_install_db --verbose --user=jason --basedir=/usr/local/Cellar/mysql/5.6.26 --datadir=/usr/
==> Caveats
A "/etc/my.cnf" from another install may interfere with a Homebrew-built
server starting up correctly.

To connect:
    mysql -uroot

To have launchd start mysql at login:
  ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents
Then to load mysql now:
  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
Or, if you don't want/need launchctl, you can just run:
  mysql.server start

开机启动，不用。
ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist

配置脚本
/usr/local/opt/mysql/bin/mysql_secure_installation

Add new user
grant all privileges on *.* to 'test'@'%' identified by 'test' with grant option;
flush privileges;

```

### 安装phpadmin
下载 phpmyadmin, 放在web root下，nginx配置文件如下

```
server {
    listen       8080;
    server_name  local.phpadmin.com;
    root    /Users/jason/Downloads/phpMyAdmin;
    #access_log  logs/host.access.log  main;
    index index.html index.php;

    location / {
         index  index.html index.php;
     }

    location ~ \.php$ {
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }
}
```
配置 phpmyadmin: 把 config.ini.php 放到目录下。

```
<?php

/* Servers configuration */
$i = 0;

/* Server: localhost [1] */
$i++;
$cfg['Servers'][$i]['verbose'] = 'localhost';
$cfg['Servers'][$i]['host'] = '127.0.0.1';
$cfg['Servers'][$i]['port'] = '3306';
$cfg['Servers'][$i]['socket'] = '';
$cfg['Servers'][$i]['connect_type'] = 'tcp';
$cfg['Servers'][$i]['auth_type'] = 'config';
$cfg['Servers'][$i]['user'] = 'test';
$cfg['Servers'][$i]['password'] = 'test';
$cfg['Servers'][$i]['AllowNoPassword'] = true;

/* End of servers configuration */
```



### PHP

```shell
brew update
brew tap homebrew/dupes
brew tap josegonzalez/homebrew-php

#查看安装选项
brew options php55
brew install php55 --with-debug

#安装扩展，看情况。
brew install php55-apcu php55-gearman php55-geoip php55-gmagick php55-imagick php55-intl php55-mcrypt php55-memcache php55-memcached php55-mongo php55-opcache php55-pdo-pgsql php55-phalcon php55-redis php55-sphinx php55-swoole php55-uuid php55-xdebug;

brew install php55-swoole php55-xdebug php55-mongo php55-mcrypt
#redis需要自己下源码编译

xcode-select --install
brew options php56
brew install php56 --with-debug --with-cgi


#修改PATH
echo 'export PATH="$(brew --prefix php55)/bin:$PATH"' >> ~/.bash_profile  #for php
echo 'export PATH="$(brew --prefix php55)/sbin:$PATH"' >> ~/.bash_profile  #for php-fpm
echo 'export PATH="/usr/local/bin:/usr/local/sbib:$PATH"' >> ~/.bash_profile #for other brew install soft
source ~/.bash_profile

php -v 
php-fpm -v

#修改php-fpm配置文件，vim /usr/local/etc/php/5.5/php-fpm.conf，找到pid相关大概在25行，去掉注释 pid = run/php-fpm.pid, 那么php-fpm的pid文件就会自动产生在/usr/local/var/run/php-fpm.pid，下面要安装的Nginx pid文件也放在这里。

#测试php-fpm配置
php-fpm -t
php-fpm -c /usr/local/etc/php/5.5/php.ini -y /usr/local/etc/php/5.5/php-fpm.conf -t

#启动php-fpm
php-fpm -D
php-fpm -c /usr/local/etc/php/5.5/php.ini -y /usr/local/etc/php/5.5/php-fpm.conf -D

#关闭php-fpm
kill -INT `cat /usr/local/var/run/php-fpm.pid`

#重启php-fpm
kill -USR2 `cat /usr/local/var/run/php-fpm.pid`

#也可以用上文提到的brew命令来重启php-fpm，不过他官方不推荐用这个命令了
brew services restart php55

#还可以用这个命令来启动php-fpm
launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php55.plist


#安装composer
brew install composer
#检查一下情况
composer --version
```

### 安装nginx
```shell
brew install nginx --with-http_geoip_module

#测试配置是否有语法错误
nginx -t

#打开 nginx
sudo nginx

#重新加载配置|重启|停止|退出 nginx
nginx -s reload|reopen|stop|quit

#也可以使用Mac的launchctl来启动|停止
launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist
launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist


#Nginx开机启动
ln -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist


```


## 设置快捷服务控制命令
```shell
alias nginx.start='launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist'
alias nginx.stop='launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist'
alias nginx.restart='nginx.stop && nginx.start'
alias php-fpm.start="launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php55.plist"
alias php-fpm.stop="launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.php55.plist"
alias php-fpm.restart='php-fpm.stop && php-fpm.start'
alias mysql.start="launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist"
alias mysql.stop="launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist"
alias mysql.restart='mysql.stop && mysql.start'
alias redis.start="launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.redis.plist"
alias redis.stop="launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.redis.plist"
alias redis.restart='redis.stop && redis.start'
alias memcached.start="launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.memcached.plist"
alias memcached.stop="launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.memcached.plist"
alias memcached.restart='memcached.stop && memcached.start'
```

## 制作Yosemite安装盘
准备一个8GB 的 U盘，用「应用程序 – 实用工具 – 磁盘工具」格式化成「Mac OS X 扩展（日志式）」格式，并将盘符命名为「Untitled」

```shell
sudo /Applications/Install/\ OS/\ X/\ Yosemite.app/Contents/Resources/createinstallmedia --volume /Volumes/Untitled --applicationpath /Applications/Install/\ OS/\ X/\ Yosemite.app --nointeraction
```

使用U盘引导机器的方法：重启机器出现灰白色的苹果界面，听到「当」的一声后按下「option」键就进入了引导设备的选择界面，将指针移动到黄色的 U盘选择启动即可。

## 破解sublime的方法：

进入Application目录，右键sublime，show package contents，进入 contents->MacOS, 复制一份sublime text备份。右键get info获取绝对路径，terminal中用vim打开，:%!xxd，打开16进制显示，搜索“3342 3032”，修改为“3242 3032”。 :%!xxd -r 恢复字符显示，:wq退出。
打开sublime，在 Help -> Enter License 中输入

```
-----BEGIN LICENSE-----
cyrus.chan
Unlimited User License
EA7E-30846
A8F1CE01CAE49CA65ABC6F05A5815366
89276617F5821B1C32B50B076C950146
5DAF397618655BB6A9C27D139D2557CC
338B973FB86FDCA5D4CBFE530CCB5208
1DB0B8C906E4324ADD3B69AA223FAE83
2C83DEFFB3523423B867AFDA48B030A9
DAA77D9D63859982268E67B21CF8D412
9BBCD35BA70BA6279846FC3D462D2277
-----END LICENSE-----
```


### sublime2 插件安装

install package install:
ctrl + ` , open https://packagecontrol.io/installation to copy the code.


Emmet, Bracket Highlighter, DocBlockr, Tag, Alignment, Git, GoSublime, Sublime Tmpl, (Glue) AllAutocomplete (, SublimeREPL, MarkdownEditing, PlainTasks)括号里的可以不装
Swift, Monokai Extended, Markdown Extended (用于markdown高亮)

Bracket Highlighter -> user preference -> bracket_styles -> default -> style: solid

### Shortcut for sublime
Already created a soft link to /usr/local/bin/subl, therefore we can use `subl ./` to open current dir with Sublime. If not created by brew, you could create the link by yourself. The subl file is proberbly in ~/Applications/Sublime2.app/Content/SharedSupport/bin/

### User preference of Sublime

```json
{
    "color_scheme": "Packages/Colorsublime-Theme/Dracula.tmTheme",
    "ignored_packages":
    [
        "Vintage"
    ],
    "font_face": "Menlo Regular",
    "font_size": 14,
    "tab_size": 4,
    "translate_tabs_to_spaces": true,
    "word_wrap": true,
    "highlight_line": true,
    "highlight_modified_tabs": true,
    "bold_folder_labels": true
}
```

### Great Themes for sublime
- Monokai Extended (with markdown syntax)
- Markdown Extended
open a .md file, call out the console, input "markdown extended" to set the current file as markdown syntax. View -> Syntax -> open all with current extension as "markdown extended"

### sublime2 加入Typescript Highlight
[stackoverflow](http://stackoverflow.com/questions/12785583/add-ts-language-files-to-sublime-text-to-support-additional-syntax-coloring)
To add TypeScript syntax highlighting support to Sublime Text on Mac:

- Unzip the downloaded file. It contains a file named typescript.tmlanguage
- Create a subfolder in your sublime Package folder called TypeScript. 
- Drop `typescript.tmlanguage` into your newly created TypeScript folder.
文件在下面的链接下载
[MS blog](http://blogs.msdn.com/b/interoperability/archive/2012/10/01/sublime-text-vi-emacs-typescript-enabled.aspx)




## convert encoding to UTF8
iconv -f GBK -t UTF8 inputfile > outputfile


## 如何利用日文键盘上的“英数”和"KANA"键盘
- Download the software named "Karabiner"
- Grant the Accessibility, open the Preference
- "Misc & Uninstall" -> "Open private.xml" -> input following -> save

```xml
<?xml version="1.0"?>
<root>
    <item>
        <name>Swap Language</name>
        <identifier>default.swaplang</identifier>
        <autogen>__KeyToKey__ KeyCode::JIS_EISUU, KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH</autogen>
        <autogen>__KeyToKey__ KeyCode::JIS_KANA, KeyCode::VK_CHANGE_INPUTSOURCE_CHINESE_SIMPLIFIED</autogen>
    </item>
</root>
```
```xml
<!--> 绑定 英数 到 ctrl+down, 事先在系统里设置ctrl＋up为切换到下一个输入法, iTerm下只能使用ctrl + up, down不起作用；
绑定KANA到 fn+delete, 系统默认该组合为delete forward。
这样可以方便的切换输入法，也有了del键。
<-->
<?xml version="1.0"?>
<root>
    <item>
        <name>Swap Language</name>
        <identifier>default.swaplang</identifier>
        <autogen>__KeyToKey__ KeyCode::JIS_EISUU, 
            KeyCode::CURSOR_UP, ModifierFlag::COMMAND_L </autogen>
        <autogen>__KeyToKey__ KeyCode::JIS_KANA, 
            KeyCode::DELETE, ModifierFlag::FN</autogen>
    </item>
</root>
```

- Back to "Change key", Enable the private setting by checking the checkbox
- Press KANA and 英数 to test.

### 默认加入的按键组合

```
Fn-Up Arrow PageUp
Fn-Down Arrow   PageDown
Fn-Left Arrow   Home
Fn-Right Arrow  End
Fn-Delete   Forward Delete

```

## 如何在iTerm中使用Option＋左右 来跳过单词

- `Command + ,` to open preferene of iTerm
- Profile -> Keys -> double click to edit the `option ->`
- change it to `Send Escaped Character`, `f`.

这相当于是快捷键 `Esc + f`, forward; `option <-` 设为 `Esc + b`, back


## 关于 phpstorm （Eclipse Mac） 快捷键
Keymap
Show intension actions --->  默认为command + 1，加一个 option + enter
移动行 ： option＋up／down
删除行： command ＋ d


## Install JDK

`brew cask install java`, 在 `.zshrc` 文件中设置 `JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home`

## Install Hadoop




## Idea Intellij 15

以下网址有破解方法
http://www.iteblog.com/idea/

破解服务器地址
http://www.iteblog.com/idea/key.php

```
1456998749834-eyJsaWNlbnNlSWQiOiIxNDU2OTk4NzQ5ODM0IiwibGljZW5zZWVOYW1lIjoiamFzb24iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoid3d3Lmxhbnl1cy5jb20iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRDIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn1dLCJoYXNoIjoiMjkxMTI3Ni8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-u2qVmBTwWWIVW2ub2TAwsxxps2yktpsY0+RHM9YTiFoI1O3A2JryUXa+a70y11MPuYqDNvTYbum6JsvHzVgVuQ5DAvhnMjpZiZERwjY1H2qqdlcfLLbSDfJTTOxPVPxyfWJf+yd0rFKwxs0SHZLMFx97L4eQBVGAe3GQtSZti29tt7wTQ9ijlDQEMEHSzT6LN10q3mrUXIQHktENESb4A9EAk7+czccvdjdE8EohLDRZBfcwIiDsNt+5E2D0h9pFYRNyYhQOniLcGUgYadUqiisdG115Som1vBb6q0gSzp6opxdAM5QDoAFc3uTQL5QJFhFUgKgna6vFAXq7HG4udw==-MIIDKTCCAhGgAwIBAgIEGb/InTANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJDTjELMAkGA1UECBMCU0MxCzAJBgNVBAcTAkNEMQ8wDQYDVQQKEwZpbGFueXUxDzANBgNVBAsTBmlsYW55dTEPMA0GA1UEAxMGUm9vdENBMB4XDTE1MTEwNzA4MTUxNVoXDTI1MTEwNDA4MTUxNVowUzELMAkGA1UEBhMCQ04xCzAJBgNVBAgTAlNDMQswCQYDVQQHEwJDRDELMAkGA1UEChMCTHkxCzAJBgNVBAsTAkx5MRAwDgYDVQQDEwdTdWJqZWN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxqIGpK9rtl6AF/AEdnBRkOk5iLuskmYHUYwDsJG+zHeKR8K/+Ag05LjYGE1WiWj/FdQxX7/DQVKhffKlhMj+1P1xNJRXZoSvu50kou2nKwwykLkqKT7fJ0jrQfh225wVK+xswcPPmZx5M7MrPLtYq2PhkTOYCi9W/9dt1rBkjlWZu1MTzNAPZIEItfXfRrg51bdtoEscZ0pmrYcPqnE+kWCSE7scnzzZsuVF4yIQjvk7K6IOM+LgKKVLOPCc7An953aRZSq8ZIRRJ6aLOIGiwP7eNqgCWh8e9fezfR5muQ7MJ6FjkDYq/iqfdsd1viD3XYuYfKfdUisB9T+1Ym1uQwIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQAxVAqHXXfz18Od95noj+73LyIe5GM46KTywTHq67KJBdulNCT7qkydW4qHRsZzEUjwWOha9a/uJ82uDlX8JcflCwujrv4JWILa0eivE91MZPkmOC2LrtUwWC22WQkeKkMaCQ7bPIAUyZBd8/KARXdwS+6O1luU5wmaj5OSZLs7XcYAdteJC0zhXHyBHs92sfvVlJLJJs1DKVb5VPfvJbznE6JPXdJKfsDSgZc9YYxvdUupuTZeRJWkmUW8XqasQRjcNMzCswgd0wc1oASIizklsOyAwBXwayz1yPof0g/tI7WPIrkCHqzOxHM/Itc3T/SNwvUkEgW8k+9O79aUNBuW
```

## Mac中查看端口占用情况
`lsof -Pnl +M -i4 | grep 4000`
`netstat -vanp tcp | grep 3000`
For OSX El Capitan and newer (or if your netstat doesn't support -p), use lsof
`lsof -i tcp:3000`


## iTerm2 打开多个pane同时编辑

```
cmd + d // 水平打开
或者 cmd + shift + d // 垂直打开

cmd + option + i // 当前tab中的所有pane，同时输入
// 再按一次则取消
```


## Jenkins 登录问题

brew 安装完Jenkins后，会要求用户名密码，这需要到 ~/.jenkin/config.xml 中， 把 denyAnonymousReadAccess 这个属性改为 false


## .ssh permissions

~/.ssh 700
~/.ssh/config 600

## three finger drag

Preference - Accessibility - Mouse&TrackPad - TrackPad option - three finger drag

## change shortcut

Preference - Keyboard - shortcut - input source
换成 cmd + space 

Preference - Keyboard - shortcut - spotlight
换成 option + space


## set git editor

`git config --global core.editor "vim"`

## redis delete keys with prefix

EVAL "return redis.call('del', unpack(redis.call('keys', ARGV[1])))" 0 prefix:*


## Replace string in multiple files

grep -rl 'windows' . | xargs sed -i '' 's/windows/linux/g'


## remove Chrome

```
rm -r /Applications/Google\ Chrome.app/
rm -r ~/Library/Application\ Support/Google/Chrome/
rm ~/Library/Application\ Support/CrashReporter/Google\ Chrome*
rm ~/Library/Preferences/com.google.Chrome*
rm ~/Library/Preferences/Google\ Chrome*
rm -r ~/Library/Caches/com.google.Chrome*
rm -r ~/Library/Saved\ Application\ State/com.google.Chrome.savedState/
rm ~/Library/Google/GoogleSoftwareUpdate/Actives/com.google.Chrome
rm ~/Library/Google/Google\ Chrome*
rm -r ~/Library/Speech/Speakable\ Items/Application\ Speakable\ Items/Google\ Chrome/
```

## Rebase 使用方法
开一个 branch，然后随便 commit ，直到真的看起来弄对了。然后把这个 branch 以 master 为起点 rebase 成只有一个 commit，然后合并到 master ，然后提交 master，然后删掉这个 branch

rebase 简单流程 `git rebase -i master`, 除了第一行 pick, 后续都用 fix; 最后 `git commit --amend -m "xx"` 改注释。

## vim 使用
- 删除多行第一个单词
ctrl+shift+v , 下移，右移选中要删除的内容，d 删除

- 在每一行插入字符串
ctrl+shift+v, 下移， shitf + i, 输入内容， esc

## 切分文件，合并文件

`split -b 256m bigfile "bigfile.part."`

`cat bigfile.part.* > origin-bigfile`


## aria2c

`aria2c --enable-rpc --rpc-listen-all -D`

port=6800


## build mysql on mac

https://ruiaylin.github.io/2015/06/03/mysql%20source%20code%20debug%20xcode/

```
download percona-server-5.6.39-83.1.tar.gz
tar xf percona-server-5.6.39-83.1.tar.gz

brew install cmake
brew install gcc

install xcode
xcode-select --install
sudo xcode-select --reset
xcrun -find c++
xcrun -find cc

cd percona-server-5.6.39-83.1
mkdir work
cmake . -G "Xcode" -DWITH_DEBUG=1  -DWITH_TOKUDB_STORAGE_ENGINE=OFF -DWITHOUT_TOKUDB_STORAGE_ENGINE=ON -DCMAKE_INSTALL_PREFIX=/Users/jason/Downloads/percona-server-5.6.39-83.1/work
cmake 之后，会生成一个 xcode的工程文件 MySQL.xcodeproj ，使用xcode 打开, 点编译

cd work ; mkdir {bin,share,scripts,data}; cd ..;
cp sql/Debug/mysqld work/bin/
cp client/Debug/mysql* work/bin/
cp extra/Debug/my_print_defaults work/bin/
cp -r sql/share/* work/share/
cp -r scripts/* work/scripts/
chmod +x work/scripts/*
cp scripts/*.sql  work/share/
cp support-files/*.cnf work/share/ 

./scripts/mysql_install_db --user=jason --basedir=/Users/jason/Downloads/percona-server-5.6.39-83.1/work --datadir=/Users/jason/Downloads/percona-server-5.6.39-83.1/work/data  --force

xcode 选择 mysqld, 修改scheme, 添加启动参数
--user=jason
--socket=/tmp/percona.sock // 防止和本地mysql冲突
--port=33060

环境变量添加：
MYSQL_HOME=/Users/jason/Downloads/percona-server-5.6.39-83.1/work

加断点，启动mysqld，调试
```

